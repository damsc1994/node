'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const sinon = require('sinon');
const proxyquire = require('proxyquire');
const test = require('ava');
const metricFixture = require('../models/fixtures/metric');
const agentFixture = require('../models/fixtures/agent');

let config = {
    logging: function () {}
};

const uuid = 'yyy-yyy-yyy';
let AgentStub = null;
let MetricStub = null;
let sandbox = null;
let db = null;
let newMetric = {
    id: 4,
    type: 'platzi',
    value: 'Dato Platzi 4',
    agentId: 1
};
const cod = {
    WHERE: {
        uuid
    }
};

const type = 'platzi';
let codFindMetricAnegtUuid = null;
let codfindTypeAgentUuId = null;

test.beforeEach('metric#setup', async () => {
    sandbox = sinon.createSandbox();
    MetricStub = {
        belongsTo: sandbox.spy()
    };
    AgentStub = {
        hasMany: sandbox.spy()

        // Model findOne AgentStub
    };AgentStub.findOne = sandbox.stub();
    AgentStub.findOne.withArgs(cod).returns(Promise.resolve(agentFixture.finByuuId(uuid)));

    // Model create MetricStub 
    MetricStub.create = sandbox.stub();
    MetricStub.create.withArgs(newMetric).returns(Promise.resolve({
        toJSON() {
            return newMetric;
        }
    }));

    //Model findAll MetricStub
    codFindMetricAnegtUuid = {
        attributes: ['type'],
        group: ['type'],
        include: [{
            attributes: [],
            model: AgentStub,
            where: { uuid }
        }],
        raw: true
    };
    codfindTypeAgentUuId = {
        attributes: ['id', 'type', 'value', 'createdAt'],
        where: { type },
        limit: 20,
        order: [['createdAt', 'DESC']],
        include: [{
            attributes: [],
            model: AgentStub,
            where: { uuid }
        }],
        raw: true
    };

    MetricStub.findAll = sandbox.stub();
    MetricStub.findAll.withArgs(codFindMetricAnegtUuid).returns(Promise.resolve(metricFixture.findAgentUuId(uuid)));
    MetricStub.findAll.withArgs(codfindTypeAgentUuId).returns(Promise.resolve(metricFixture.findAgentTypeUuId(type, uuid)));

    const setupDatabase = proxyquire('../index', {
        './models/agent': () => AgentStub,
        './models/metric': () => MetricStub
    });
    db = await setupDatabase(config);
});

test.serial('Metric', t => {
    var _rec = new _powerAssertRecorder();

    t.truthy(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').Metric, 'arguments/0'), {
        content: 't.truthy(db.Metric, \'El servidor no ha podido arrancar la configuracion de Metric\')',
        filepath: 'test/metric-test.js',
        line: 91,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Metric","range":[12,18]},"computed":false,"range":[9,18]},{"type":"StringLiteral","value":"El servidor no ha podido arrancar la configuracion de Metric","range":[20,82]}],"range":[0,83]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Metric","range":[12,18]},{"type":{"label":","},"range":[18,19]},{"type":{"label":"string"},"value":"El servidor no ha podido arrancar la configuracion de Metric","range":[20,82]},{"type":{"label":")"},"range":[82,83]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'El servidor no ha podido arrancar la configuracion de Metric');
});

test.afterEach(() => {
    sandbox && sandbox.restore();
});

test.serial('metric#create', async t => {
    var _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder();

    const metric = await db.Metric.create(uuid, newMetric);
    t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(MetricStub, 'arguments/0/object/object').create, 'arguments/0/object').called, 'arguments/0'), {
        content: 't.true(MetricStub.create.called, \'La funcion no fue llamada\')',
        filepath: 'test/metric-test.js',
        line: 100,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"create","range":[18,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"La funcion no fue llamada","range":[33,60]}],"range":[0,61]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"create","range":[18,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"La funcion no fue llamada","range":[33,60]},{"type":{"label":")"},"range":[60,61]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada');
    t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(MetricStub, 'arguments/0/callee/object/object').create, 'arguments/0/callee/object').calledWith(_rec3._capt(newMetric, 'arguments/0/arguments/0')), 'arguments/0'), {
        content: 't.true(MetricStub.create.calledWith(newMetric), \'La funcion no fue llamada con parametros\')',
        filepath: 'test/metric-test.js',
        line: 101,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"create","range":[18,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"newMetric","range":[36,45]}],"range":[7,46]},{"type":"StringLiteral","value":"La funcion no fue llamada con parametros","range":[48,90]}],"range":[0,91]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"create","range":[18,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"newMetric","range":[36,45]},{"type":{"label":")"},"range":[45,46]},{"type":{"label":","},"range":[46,47]},{"type":{"label":"string"},"value":"La funcion no fue llamada con parametros","range":[48,90]},{"type":{"label":")"},"range":[90,91]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada con parametros');
    t.deepEqual(metric, newMetric, 'Los datos devuelto no son iguales');
});

test.serial('metric#findAgentUuid', async t => {
    var _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    const metrics = await db.Metric.findAgentUuId(uuid);
    t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
        content: 't.true(MetricStub.findAll.calledOnce, \'La funcion no fue llamada una vez\')',
        filepath: 'test/metric-test.js',
        line: 107,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledOnce","range":[26,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"La funcion no fue llamada una vez","range":[38,73]}],"range":[0,74]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledOnce","range":[26,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"La funcion no fue llamada una vez","range":[38,73]},{"type":{"label":")"},"range":[73,74]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada una vez');
    t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(MetricStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(_rec5._capt(codFindMetricAnegtUuid, 'arguments/0/arguments/0')), 'arguments/0'), {
        content: 't.true(MetricStub.findAll.calledWith(codFindMetricAnegtUuid), \'La funcion no fue llamada con su argumento\')',
        filepath: 'test/metric-test.js',
        line: 108,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledWith","range":[26,36]},"computed":false,"range":[7,36]},"arguments":[{"type":"Identifier","name":"codFindMetricAnegtUuid","range":[37,59]}],"range":[7,60]},{"type":"StringLiteral","value":"La funcion no fue llamada con su argumento","range":[62,106]}],"range":[0,107]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledWith","range":[26,36]},{"type":{"label":"("},"range":[36,37]},{"type":{"label":"name"},"value":"codFindMetricAnegtUuid","range":[37,59]},{"type":{"label":")"},"range":[59,60]},{"type":{"label":","},"range":[60,61]},{"type":{"label":"string"},"value":"La funcion no fue llamada con su argumento","range":[62,106]},{"type":{"label":")"},"range":[106,107]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada con su argumento');
    t.truthy(_rec6._expr(_rec6._capt(metrics, 'arguments/0'), {
        content: 't.truthy(metrics, \'La funcion no devolvio datos correctos\')',
        filepath: 'test/metric-test.js',
        line: 109,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"Identifier","name":"metrics","range":[9,16]},{"type":"StringLiteral","value":"La funcion no devolvio datos correctos","range":[18,58]}],"range":[0,59]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"metrics","range":[9,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"string"},"value":"La funcion no devolvio datos correctos","range":[18,58]},{"type":{"label":")"},"range":[58,59]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no devolvio datos correctos');
});

test.serial('metric#findTypeAgentUuId', async t => {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    const metrics = await db.Metric.findTypeAgentUuId(uuid, type);
    t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
        content: 't.true(MetricStub.findAll.called, \'La funcion no fue llamada una vez\')',
        filepath: 'test/metric-test.js',
        line: 114,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"called","range":[26,32]},"computed":false,"range":[7,32]},{"type":"StringLiteral","value":"La funcion no fue llamada una vez","range":[34,69]}],"range":[0,70]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"called","range":[26,32]},{"type":{"label":","},"range":[32,33]},{"type":{"label":"string"},"value":"La funcion no fue llamada una vez","range":[34,69]},{"type":{"label":")"},"range":[69,70]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada una vez');
    t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
        content: 't.true(MetricStub.findAll.calledOnce, \'La funcion no fue llamada una vez\')',
        filepath: 'test/metric-test.js',
        line: 115,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledOnce","range":[26,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"La funcion no fue llamada una vez","range":[38,73]}],"range":[0,74]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledOnce","range":[26,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"La funcion no fue llamada una vez","range":[38,73]},{"type":{"label":")"},"range":[73,74]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada una vez');
    t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(MetricStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(_rec9._capt(codfindTypeAgentUuId, 'arguments/0/arguments/0')), 'arguments/0'), {
        content: 't.true(MetricStub.findAll.calledWith(codfindTypeAgentUuId), \'La funcion no fue llamada con sus argumentos\')',
        filepath: 'test/metric-test.js',
        line: 116,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledWith","range":[26,36]},"computed":false,"range":[7,36]},"arguments":[{"type":"Identifier","name":"codfindTypeAgentUuId","range":[37,57]}],"range":[7,58]},{"type":"StringLiteral","value":"La funcion no fue llamada con sus argumentos","range":[60,106]}],"range":[0,107]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledWith","range":[26,36]},{"type":{"label":"("},"range":[36,37]},{"type":{"label":"name"},"value":"codfindTypeAgentUuId","range":[37,57]},{"type":{"label":")"},"range":[57,58]},{"type":{"label":","},"range":[58,59]},{"type":{"label":"string"},"value":"La funcion no fue llamada con sus argumentos","range":[60,106]},{"type":{"label":")"},"range":[106,107]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no fue llamada con sus argumentos');
    t.truthy(_rec10._expr(_rec10._capt(metrics, 'arguments/0'), {
        content: 't.truthy(metrics, \'La funcion no devolvio datos correctos\')',
        filepath: 'test/metric-test.js',
        line: 117,
        async: true,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"Identifier","name":"metrics","range":[9,16]},{"type":"StringLiteral","value":"La funcion no devolvio datos correctos","range":[18,58]}],"range":[0,59]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"metrics","range":[9,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"string"},"value":"La funcion no devolvio datos correctos","range":[18,58]},{"type":{"label":")"},"range":[58,59]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'La funcion no devolvio datos correctos');
});
//# sourceMappingURL=/Users/damsc94/Documents/desarollo/pruebas-javascrit/node/platziserve/platziserve-db/node_modules/.cache/ava/92250fc333ce0aea730bbbb1ffdbaf2d.js.map