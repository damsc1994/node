{"version":3,"sources":["metric-test.js"],"names":["sinon","require","proxyquire","test","metricFixture","agentFixture","config","logging","uuid","AgentStub","MetricStub","sandbox","db","newMetric","id","type","value","agentId","cod","WHERE","codFindMetricAnegtUuid","codfindTypeAgentUuId","beforeEach","createSandbox","belongsTo","spy","hasMany","findOne","stub","withArgs","returns","Promise","resolve","finByuuId","create","toJSON","attributes","group","include","model","where","raw","limit","order","findAll","findAgentUuId","findAgentTypeUuId","setupDatabase","serial","t","truthy","Metric","afterEach","restore","metric","true","called","calledWith","deepEqual","metrics","calledOnce","findTypeAgentUuId"],"mappings":"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","file":"metric-test.js","sourcesContent":["'use strict'\n\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst test = require('ava')\nconst metricFixture = require('../models/fixtures/metric')\nconst agentFixture = require('../models/fixtures/agent')\n\n\nlet config = {\n    logging: function () {}\n}\n\nconst uuid = 'yyy-yyy-yyy'\nlet AgentStub = null\nlet MetricStub = null\nlet sandbox = null\nlet db = null\nlet newMetric = {\n    id: 4,\n    type: 'platzi',\n    value: 'Dato Platzi 4',\n    agentId: 1\n}\nconst cod = {\n    WHERE : {\n        uuid\n    }\n}\n\nconst type = 'platzi'\nlet codFindMetricAnegtUuid = null\nlet codfindTypeAgentUuId = null\n\n\ntest.beforeEach('metric#setup', async () => {\n sandbox = sinon.createSandbox()\n MetricStub = {\n    belongsTo: sandbox.spy()\n }\n AgentStub = {\n    hasMany: sandbox.spy()\n }\n\n // Model findOne AgentStub\n AgentStub.findOne = sandbox.stub()\n AgentStub.findOne.withArgs(cod).returns(Promise.resolve(agentFixture.finByuuId(uuid))) \n\n // Model create MetricStub \n MetricStub.create = sandbox.stub()\n MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\n     toJSON() { return newMetric }\n }))\n\n //Model findAll MetricStub\n codFindMetricAnegtUuid = {\n    attributes: ['type'],\n    group: ['type'],\n    include: [{\n        attributes: [],\n        model: AgentStub,\n        where: { uuid }\n    }],\n    raw: true\n }\n codfindTypeAgentUuId = {\n    attributes: ['id', 'type', 'value', 'createdAt'],\n    where: { type },\n    limit: 20,\n    order: [['createdAt', 'DESC']],\n    include: [{\n        attributes: [],\n        model: AgentStub,\n        where: {uuid}\n    }],\n    raw: true\n }\n\n MetricStub.findAll = sandbox.stub()\n MetricStub.findAll.withArgs(codFindMetricAnegtUuid).returns(Promise.resolve(metricFixture.findAgentUuId(uuid)))\n MetricStub.findAll.withArgs(codfindTypeAgentUuId).returns(Promise.resolve(metricFixture.findAgentTypeUuId(type, uuid)))\n\n const setupDatabase = proxyquire('../index', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n })\n db = await setupDatabase(config)\n})\n\ntest.serial('Metric', (t) => {\n    t.truthy(db.Metric, 'El servidor no ha podido arrancar la configuracion de Metric')\n})\n\ntest.afterEach(() => {\n    sandbox && sandbox.restore()\n})\n\ntest.serial('metric#create', async (t) => {\n    const metric = await db.Metric.create(uuid, newMetric)\n    t.true(MetricStub.create.called, 'La funcion no fue llamada')\n    t.true(MetricStub.create.calledWith(newMetric), 'La funcion no fue llamada con parametros')\n    t.deepEqual(metric, newMetric, 'Los datos devuelto no son iguales')\n}) \n\ntest.serial('metric#findAgentUuid', async (t) => {\n    const metrics = await db.Metric.findAgentUuId(uuid)\n    t.true(MetricStub.findAll.calledOnce, 'La funcion no fue llamada una vez')\n    t.true(MetricStub.findAll.calledWith(codFindMetricAnegtUuid), 'La funcion no fue llamada con su argumento')\n    t.truthy(metrics, 'La funcion no devolvio datos correctos')\n})\n\ntest.serial('metric#findTypeAgentUuId', async (t) => {\n    const metrics = await db.Metric.findTypeAgentUuId(uuid, type)\n    t.true(MetricStub.findAll.called, 'La funcion no fue llamada una vez')\n    t.true(MetricStub.findAll.calledOnce, 'La funcion no fue llamada una vez')\n    t.true(MetricStub.findAll.calledWith(codfindTypeAgentUuId), 'La funcion no fue llamada con sus argumentos')\n    t.truthy(metrics, 'La funcion no devolvio datos correctos')\n})"]}