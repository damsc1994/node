{"version":3,"sources":["agent-test.js"],"names":["test","require","proxyquire","sinon","agentFixture","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","single","Object","assign","id","uuid","cod","where","newAgent","name","username","hostname","pid","connected","createdAt","Date","updateAt","beforeEach","createSandbox","hasMany","findOne","stub","withArgs","returns","Promise","resolve","update","findById","findByUuId","finByuuId","findAll","find","create","toJSON","findConnected","findByConected","setupDatabase","afterEach","restore","serial","t","truthy","Agent","true","called","calledWith","agent","calledOnce","deepEqual","createdORUpdate","calledTwice","agents","agentsConneted","findUserName"],"mappings":"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","file":"agent-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixture = require('../models/fixtures/agent')\n\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\nlet AgentStub = null\n\nlet db = null\nlet sandbox = null\nlet single = Object.assign({}, agentFixture.single)\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\nlet cod = {\n  where: {\n    uuid: uuid\n  }\n}\nlet newAgent = {\n  id: 6,\n  uuid: '123-123-123',\n  name: 'new agent',\n  username: 'platzi',\n  hostname: 'test-host',\n  pid: 0,\n  connected: true,\n  createdAt: new Date(),\n  updateAt: new Date()\n}\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n  // Modelo Agent findByOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(single).returns(Promise.resolve(single))\n  AgentStub.findOne.withArgs(cod).returns(Promise.resolve(single))\n  AgentStub.findOne.withArgs(single.id).returns(Promise.resolve(single))\n\n  // Modelo Agent update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, cod).returns(Promise.resolve(single))\n\n  //  Modelo Agent findById Stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixture.findById(id)))\n\n  // Model Agent findByUuId Stub\n  AgentStub.findByUuId = sandbox.stub()\n  AgentStub.findByUuId.withArgs(uuid).returns(Promise.resolve(agentFixture.finByuuId(uuid)))\n\n  // Model Agent findAll Stub\n  AgentStub.findAll = sandbox.stub()\n  AgentStub.findAll.returns(Promise.resolve(agentFixture.find))\n\n  // Model Agent create Strub\n  AgentStub.create = sandbox.stub()\n  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\n    toJSON () { return newAgent }\n  }))\n\n  // Model Agent findConneted\n  AgentStub.findConnected = sandbox.stub()\n  AgentStub.findConnected.withArgs(true).returns(Promise.resolve(agentFixture.findByConected()))\n\n  const setupDatabase = proxyquire('../index', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest.serial('Agent', (t) => {\n  t.truthy(db.Agent, 'El servicio de Agente paso la prueba')\n})\n\ntest.serial('setup', (t) => {\n  t.true(AgentStub.hasMany.called, 'La funcion hasMany de Agent no fue llamado')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'La funcion con agumento de Agent no fue llamado')\n  t.true(MetricStub.belongsTo.called, 'La funcion belongTo de Metric no fue llamada')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'La funcion con agumento de metric no fue llamada')\n})\n\ntest.serial('agent#findById', async (t) => {\n  let agent = await db.Agent.findById(id)\n\n  t.true(AgentStub.findById.called, 'La funcion no fue llamada')\n  t.true(AgentStub.findById.calledWith(id), 'La funcion no se llamo con el argumento correcto')\n  t.true(AgentStub.findById.calledOnce, 'La funcion no fue llamada una sola ves')\n\n  t.deepEqual(agent, agentFixture.findById(id), 'La funcion id no a devuelto el resultado esperado')\n})\n\ntest.serial('agent#createdOrUpdate --exist', async (t) => {\n  let agent = await db.Agent.createdORUpdate(single)\n  t.true(AgentStub.findOne.called, 'La funcion no fue llamada correctamente')\n  t.true(AgentStub.findOne.calledTwice, 'La funcion no fue llama dos veces')\n  t.true(AgentStub.findOne.calledWith(single), 'La funcion no fue llamada con un parametro correctamente')\n  t.deepEqual(agent, single, 'La funcion uuid no devolvio resultado iguales')\n})\n\ntest.serial('agent#createdOrUpdate --No exist', async (t) => {\n  let agent = await db.Agent.createdORUpdate(newAgent)\n\n  t.true(AgentStub.create.called, 'La funcion no fue llamada correctamente')\n  t.true(AgentStub.create.calledWith(newAgent), 'La funcion no fue llamada correctamente con un parametro')\n  t.deepEqual(agent, newAgent, 'La funcion no retorno datos iguales')\n})\n\ntest.serial('agent#findByUuid', async (t) => {\n  let agent = await db.Agent.findByUuId(uuid)\n  t.true(AgentStub.findOne.called, 'La funcion no fue llamada correctamente')\n  t.true(AgentStub.findOne.calledOnce, 'La funcion no fue llamada una ves')\n  t.true(AgentStub.findOne.calledWith(cod), 'La funcion no fue llamada con el parametro')\n  t.deepEqual(agent, agentFixture.finByuuId(uuid), 'La funcion no ha devuelto valores iguales')\n})\n\ntest.serial('agent#findAll', async (t) => {\n  let agents = await db.Agent.findAll()\n  t.true(AgentStub.findAll.called, 'La funcion no fue llamada correctamente')\n  t.true(AgentStub.findAll.calledOnce, 'La funcion no fue llamada una sola ves')\n  t.deepEqual(agents, agentFixture.find, 'La funcion no ha devuelto valores iguales')\n})\n\ntest.serial('agent#findConnected', async (t) => {\n  let agentsConneted = await db.Agent.findConnected(true)\n  t.true(AgentStub.findAll.called, 'La funcion fue llamaa correctamente')\n  t.truthy(agentsConneted, 'La funcion no retorno datos valido')\n})\n\ntest.serial('agent#findUserName', async (t) => {\n  let agents = await db.Agent.findUserName('platzi')\n  t.true(AgentStub.findAll.called, 'La funcion no fue llamada correctamente')\n  t.true(AgentStub.findAll.calledOnce, 'La funcion no fue llamauna sola ves')\n  t.truthy(agents, 'La funcion no retorno datos validos')\n})\n"]}