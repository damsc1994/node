'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const debug = require('debug')('platziserve:api:test');
const test = require('ava');
const request = require('supertest');
const server = require('../server');
const sinon = require('sinon');
const proxyquire = require('proxyquire');
const AgentFixture = require('./fixtures/agent');
const util = require('util');
const auth = require('../auth');
const config = require('../config');

const sign = util.promisify(auth.sign);
let sandbox = null;
let dbStub = null;
let AgentStub = null;
let MetricStub = null;
let serv = null;
let token = null;

test.beforeEach(async () => {
    sandbox = sinon.createSandbox();

    dbStub = sandbox.stub();
    dbStub.call(Promise.resolve({
        AgentStub,
        MetricStub
    }));

    token = await sign({ admin: true, username: 'admin' }, config.auth, console.log);

    const api = proxyquire('../api', {
        'platziserveDB': dbStub
    });

    serv = proxyquire('../server', {
        './api': api
    });
});

test.afterEach(async () => {
    sandbox && sandbox.restore();
});

test.serial.cb('/api/agents', t => {
    debug('test');
    request(server).get('/api/agents').expect(200).set('Authorization', `Bearer ${token}`).expect('content-type', /json/).end((err, res) => {
        var _rec = new _powerAssertRecorder(),
            _rec2 = new _powerAssertRecorder();

        let body = JSON.stringify(res.body);
        t.falsy(_rec._expr(_rec._capt(err, 'arguments/0'), {
            content: 't.falsy(err, \'Hubo un error en api/agents\')',
            filepath: 'tests/api-test.js',
            line: 55,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"falsy","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"Identifier","name":"err","range":[8,11]},{"type":"StringLiteral","value":"Hubo un error en api/agents","range":[13,42]}],"range":[0,43]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"falsy","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"err","range":[8,11]},{"type":{"label":","},"range":[11,12]},{"type":{"label":"string"},"value":"Hubo un error en api/agents","range":[13,42]},{"type":{"label":")"},"range":[42,43]}]',
            visitorKeys: _powerAssertVisitorKeys
        }), 'Hubo un error en api/agents');
        t.truthy(_rec2._expr(_rec2._capt(body, 'arguments/0'), {
            content: 't.truthy(body, \'api/agents no trajo los datos esperados\')',
            filepath: 'tests/api-test.js',
            line: 56,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"Identifier","name":"body","range":[9,13]},{"type":"StringLiteral","value":"api/agents no trajo los datos esperados","range":[15,56]}],"range":[0,57]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"body","range":[9,13]},{"type":{"label":","},"range":[13,14]},{"type":{"label":"string"},"value":"api/agents no trajo los datos esperados","range":[15,56]},{"type":{"label":")"},"range":[56,57]}]',
            visitorKeys: _powerAssertVisitorKeys
        }), 'api/agents no trajo los datos esperados');
        t.end();
    });
});

test.serial.todo('/api/agent/:uuid');
test.serial.todo('/api/agent/:uuid - not found');

test.serial.todo('/api/metrics/:uuid');
test.serial.todo('/api/metrics/:uuid - not found');

test.serial.todo('/api/metrics/:uuid/:type');
test.serial.todo('/api/metrics/:uuid/:type - not found');
//# sourceMappingURL=/Users/damsc94/Documents/desarollo/pruebas-javascrit/node/platziserve/platziserve-api/node_modules/.cache/ava/b9c8cb8da0caa0801990674b98192b64.js.map