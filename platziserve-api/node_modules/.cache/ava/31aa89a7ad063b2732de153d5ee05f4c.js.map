{"version":3,"sources":["api-test.js"],"names":["debug","require","test","request","server","sinon","proxyquire","AgentFixture","sandbox","dbStub","AgentStub","MetricStub","serv","beforeEach","createSandbox","stub","call","Promise","resolve","api","afterEach","restore","serial","cb","t","get","expect","end","err","res","body","agents","find","falsy","todo"],"mappings":"AAAA;;;;;AAEA,MAAMA,QAAQC,QAAQ,OAAR,EAAiB,sBAAjB,CAAd;AACA,MAAMC,OAAOD,QAAQ,KAAR,CAAb;AACA,MAAME,UAAUF,QAAQ,WAAR,CAAhB;AACA,MAAMG,SAASH,QAAQ,WAAR,CAAf;AACA,MAAMI,QAAQJ,QAAQ,OAAR,CAAd;AACA,MAAMK,aAAaL,QAAQ,YAAR,CAAnB;AACA,MAAMM,eAAeN,QAAQ,kBAAR,CAArB;;AAEA,IAAIO,UAAU,IAAd;AACA,IAAIC,SAAS,IAAb;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,aAAa,IAAjB;AACA,IAAIC,OAAO,IAAX;;AAEAV,KAAKW,UAAL,CAAgB,YAAY;AACxBL,cAAUH,MAAMS,aAAN,EAAV;;AAEAL,aAASD,QAAQO,IAAR,EAAT;AACAN,WAAOO,IAAP,CAAYC,QAAQC,OAAR,CAAgB;AACxBR,iBADwB;AAExBC;AAFwB,KAAhB,CAAZ;;AAOA,UAAMQ,MAAMb,WAAW,QAAX,EAAqB;AAC7B,yBAAiBG;AADY,KAArB,CAAZ;;AAIAG,WAAON,WAAW,WAAX,EAAwB;AAC3B,iBAASa;AADkB,KAAxB,CAAP;AAGH,CAlBD;;AAoBAjB,KAAKkB,SAAL,CAAe,YAAY;AACvBZ,eAAWA,QAAQa,OAAR,EAAX;AACH,CAFD;;AAIAnB,KAAKoB,MAAL,CAAYC,EAAZ,CAAe,aAAf,EAA8BC,KAAK;AAC/BxB,UAAM,MAAN;AACAG,YAAQC,MAAR,EACEqB,GADF,CACM,aADN,EAEEC,MAFF,CAES,GAFT,EAGEA,MAHF,CAGS,cAHT,EAGwB,MAHxB,EAIEC,GAJF,CAIM,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAA;;AAChB,YAAIC,OAAOD,IAAIC,IAAf;AACA,cAAMC,SAASxB,aAAayB,IAA5B;AACAR,UAAES,KAAF,uBAAQL,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAa,6BAAb;AACA;AACAJ,UAAEG,GAAF;AACF,KAVF;AAWH,CAbD;;AAeAzB,KAAKoB,MAAL,CAAYY,IAAZ,CAAiB,kBAAjB;AACAhC,KAAKoB,MAAL,CAAYY,IAAZ,CAAiB,8BAAjB;;AAEAhC,KAAKoB,MAAL,CAAYY,IAAZ,CAAiB,oBAAjB;AACAhC,KAAKoB,MAAL,CAAYY,IAAZ,CAAiB,gCAAjB;;AAEAhC,KAAKoB,MAAL,CAAYY,IAAZ,CAAiB,0BAAjB;AACAhC,KAAKoB,MAAL,CAAYY,IAAZ,CAAiB,sCAAjB","file":"api-test.js","sourcesContent":["'use strict'\n\nconst debug = require('debug')('platziserve:api:test')\nconst test = require('ava')\nconst request = require('supertest')\nconst server = require('../server')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst AgentFixture = require('./fixtures/agent')\n\nlet sandbox = null\nlet dbStub = null\nlet AgentStub = null\nlet MetricStub = null\nlet serv = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.createSandbox()\n\n    dbStub = sandbox.stub()\n    dbStub.call(Promise.resolve({\n        AgentStub,\n        MetricStub\n    }))\n\n    \n\n    const api = proxyquire('../api', {\n        'platziserveDB': dbStub\n    })\n\n    serv = proxyquire('../server', {\n        './api': api\n    })\n})\n\ntest.afterEach(async () => {\n    sandbox && sandbox.restore()\n})\n\ntest.serial.cb('/api/agents', t => {\n    debug('test')\n    request(server)\n     .get('/api/agents')\n     .expect(200)\n     .expect('content-type',/json/)\n     .end((err, res) => {\n        let body = res.body;\n        const agents = AgentFixture.find;\n        t.falsy(err, 'Hubo un error en api/agents')\n        //t.deepEqual(body, agents, 'api/agents no trajo los datos esperados')\n        t.end()\n     })\n})\n\ntest.serial.todo('/api/agent/:uuid')\ntest.serial.todo('/api/agent/:uuid - not found')\n\ntest.serial.todo('/api/metrics/:uuid')\ntest.serial.todo('/api/metrics/:uuid - not found')\n\ntest.serial.todo('/api/metrics/:uuid/:type')\ntest.serial.todo('/api/metrics/:uuid/:type - not found')"]}